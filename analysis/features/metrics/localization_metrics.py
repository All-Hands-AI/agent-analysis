from __future__ import annotations

from pydantic import BaseModel
from analysis.models.patch import Location, Patch, ScopeKind

class LocalizationMetrics(BaseModel):
    file_match: bool
    """
    Whether the patch makes changes in all files present in the golden patch.
    """

    function_match: bool
    """
    Whether the patch makes changes in all functions present in the golden patch.
    """

    class_match: bool
    """
    Whether the patch makes changes in all classes present in the golden patch.
    """

    file_precision: float | None
    """
    The ratio of files in the patch that are present in the golden patch.
    """

    function_precision: float | None
    """
    The ratio of functions in the patch that are present in the golden patch.
    """

    class_precision: float | None
    """
    The ratio of classes in the patch that are present in the golden patch.
    """

    @staticmethod
    def localization_of_kind(generated_locations: list[Location], gold_locations: list[Location], kind: ScopeKind) -> tuple[bool, float | None]:
        """
        Compute match and precision for a given scope kind.
        """
        gold_scopes = set([scope for loc in gold_locations if (scope := loc.most_recent_scope(kind)) is not None])
        generated_scopes = set([scope for loc in generated_locations if (scope := loc.most_recent_scope(kind)) is not None])

        match = all(gold_scope in generated_scopes for gold_scope in gold_scopes)
        precision = len(gold_scopes & generated_scopes) / len(generated_scopes) if generated_scopes else None

        return match, precision

    @staticmethod
    def from_patch(generated_patch: Patch, gold_patch: Patch) -> LocalizationMetrics:
        """
        Compute localization metrics for a patch.

        Args:
            generated_patch: The patch generated by the model.
            gold_patch: The golden patch acting as ground truth.
        """
        generated_locations = generated_patch.locations
        gold_locations = gold_patch.locations
    
        # File statistics
        file_match, file_precision = LocalizationMetrics.localization_of_kind(generated_locations, gold_locations, ScopeKind.FILE)

        # Function statistics
        function_match, function_precision = LocalizationMetrics.localization_of_kind(generated_locations, gold_locations, ScopeKind.FUNCTION)

        # Class statistics
        class_match, class_precision = LocalizationMetrics.localization_of_kind(generated_locations, gold_locations, ScopeKind.CLASS)

        return LocalizationMetrics(
            file_match=file_match,
            function_match=function_match,
            class_match=class_match,
            file_precision=file_precision,
            function_precision=function_precision,
            class_precision=class_precision,
        )